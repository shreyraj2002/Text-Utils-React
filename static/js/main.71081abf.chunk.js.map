{"version":3,"sources":["Component/About.js","Component/Navbar.js","Component/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","react_default","a","createElement","className","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Navbar","props","Fragment","dist","to","title","aria-label","aria-current","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","headings","value","onChange","event","target","rows","onClick","newText","toUpperCase","toLowerCase","split","map","word","newWord","i","length","char","charAt","join","match","sentence","slice","App","react_router_dist","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.71081abf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion-item\">                \r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"container my-3\">\r\n                <button className=\"btn btn-primary mx-2\">Enable Dark Mode</button>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"Up Button was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleDownClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n\r\n    const handleInverse = () => {\r\n        let words = text.split(\" \");\r\n        let newText = words\r\n            .map((word) => {\r\n                let newWord = \"\";\r\n                for (let i = 0; i < word.length; i++) {\r\n                    let char = word.charAt(i);\r\n                    if (char >= \"A\" && char <= \"Z\") {\r\n                        char = char.toLowerCase();\r\n                    } else if (char >= \"a\" && char <= \"z\") {\r\n                        char = char.toUpperCase();\r\n                    }\r\n                    newWord += char;\r\n                }\r\n\r\n                return newWord;\r\n            })\r\n            .join(\" \");\r\n            \r\n        setText(newText);\r\n    }\r\n\r\n    const handleSentenceCaseClick = () => {\r\n        let lowerCase = text.toLowerCase();\r\n        let regex = /([^.!?]+[!?.\\d\\s]+)/g;\r\n        let sentences = lowerCase.match(regex);\r\n        let newText = sentences\r\n            .map((sentence) => {\r\n                return (sentence.charAt(0) >= \"a\" && sentence.charAt(0) <= \"z\"\r\n                    ? sentence.charAt(0).toUpperCase() + sentence.slice(1)\r\n                    : sentence);\r\n            })\r\n            .join(\"\");\r\n\r\n        setText(newText);\r\n    };\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h1>{props.headings}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"15\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleDownClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleInverse}>iNVERSE cASE</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleSentenceCaseClick}>Sentence Case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n\r\n            </div>\r\n\r\n            <div className=\"container my-3\">\r\n                <h2>Your Text Summary</h2>\r\n                <p>{text.split(\" \").length - 1} words, {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes to read.</p>\r\n\r\n                <h2>Preview</h2>\r\n                <p>{text}</p>\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\r\nimport About from './Component/About';\r\nimport Navbar from './Component/Navbar';\r\nimport Textform from './Component/Textform';\r\nimport React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes, \r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Navbar title=\"Text Utils\" />\r\n        <div className=\"container\">\r\n          <Routes>\r\n            <Route path=\"/about\" element={<About />}>\r\n            </Route>\r\n            <Route path=\"/\" element={<Textform headings=\"Enter text below: \"/>}>\r\n            </Route>\r\n          </Routes>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}